# $Id: PubRule,v 1.58 2011-06-23 15:59:54 jerome Exp $
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# pages = $(patsubst %.sgml,$(pubdir)/%.php3,$(wildcard *.sgml))
pages_php = $(patsubst %.php,$(pubdir)/$(style)/$(appname)/%.php,$(filter-out $(pages_not_php),$(wildcard *.php)))
pages_pub = $(patsubst %.pub,$(pubdir)/$(style)/$(appname)/%.pub,$(filter-out $(pages_not_pub),$(wildcard *.pub)))
pages_gif = $(patsubst %.gif,$(pubdir)/$(style)/$(appname)/Images/%.gif,$(filter-out $(pages_not_gif),$(wildcard *.gif)))
pages_png = $(patsubst %.png,$(pubdir)/$(style)/$(appname)/Images/%.png,$(filter-out $(pages_not_png),$(wildcard *.png)))
pages_ico = $(patsubst %.ico,$(pubdir)/$(style)/$(appname)/Images/%.ico,$(filter-out $(pages_not_ico),$(wildcard *.ico)))
pages_doc = $(patsubst %.doc,$(pubdir)/$(style)/$(appname)/doc/%.doc,$(filter-out $(pages_not_doc),$(wildcard *.doc)))
pages_jpg = $(patsubst %.jpg,$(pubdir)/$(style)/$(appname)/Images/%.jpg,$(filter-out $(pages_not_jpg),$(wildcard *.jpg)))
pages_app = $(patsubst %.app,$(pubdir)/$(style)/$(appname)/%.app,$(filter-out $(pages_not_app),$(wildcard *.app)))
pages_xml = $(patsubst %.xml,$(pubdir)/$(style)/$(appname)/Layout/%.xml,$(filter-out $(pages_not_xml),$(wildcard *.xml)))
pages_odt = $(patsubst %.odt,$(pubdir)/$(style)/$(appname)/Layout/%.odt,$(filter-out $(pages_not_odt),$(wildcard *.odt)))
pages_ods = $(patsubst %.ods,$(pubdir)/$(style)/$(appname)/%.ods,$(filter-out $(pages_not_ods),$(wildcard *.ods)))
pages_csv = $(patsubst %.csv,$(pubdir)/$(style)/$(appname)/%.csv,$(filter-out $(pages_not_csv),$(wildcard *.csv)))
pages_css = $(patsubst %.css,$(pubdir)/$(style)/$(appname)/Layout/%.css,$(filter-out $(pages_not_css),$(wildcard *.css)))
pages_js  = $(patsubst %.js,$(pubdir)/$(style)/$(appname)/Layout/%.js,$(filter-out $(pages_not_js),$(wildcard *.js)))
pages_sty = $(patsubst %.sty,$(pubdir)/$(style)/$(appname)/%.sty,$(filter-out $(pages_not_sty),$(wildcard *.sty)))
pages_sql = $(patsubst %.sql,$(pubdir)/$(style)/$(appname)/%.sql,$(filter-out $(pages_not_sql),$(wildcard *.sql)))
pages_pdf = $(patsubst %.pdf,$(pubdir)/$(style)/$(appname)/Docs/%.pdf,$(filter-out $(pages_not_pdf),$(wildcard *.pdf)))

pages_appxml = $(patsubst application.xml,$(pubdir)/$(appname)/application.xml,$(wildcard application.xml))

info_xml = $(patsubst info.xml,$(pubdir)/$(style)/$(appname)/info.xml,$(wildcard info.xml))

pages_top = $(addprefix $(pubdir)/,$(TOP_MODULES)) 

pages = $(pages_php) $(pages_gif) $(pages_png) $(pages_ico) $(pages_doc) $(pages_ods) $(pages_csv) \
        $(pages_jpg) $(pages_app) $(pages_xml) $(pages_odt) $(pages_css) \
        $(pages_js)  $(pages_top) $(pages_sty) $(pages_sql) $(pages_pdf) \
	$(info_xml) $(pages_appxml)

#installcp = install  -m 0644  -C --backup=never
installcp = cp -f

ifndef LANGS
LANGS=en fr
endif

ifndef RELEASE
RELEASE=$(shell cat RELEASE)
endif

ifndef TAR
TAR=tar
endif

# Publish and check for post-publishing rules
all : publish $(POSTPUBLISH) pi

$(pubdir)/%.conf: %.conf
	$(installcp) $< $@

$(pubdir)/%.php: %.php
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.php : %.php $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.pub : %.pub $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.app : %.app $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.sql : %.sql $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Layout/%.xml : %.xml $(pubdir)/$(style)/$(appname)/Layout
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Layout/%.odt : %.odt $(pubdir)/$(style)/$(appname)/Layout
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.ods : %.ods $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.csv : %.csv $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/doc/%.doc : %.doc $(pubdir)/$(style)/$(appname)/Doc
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Images/%.png : %.png $(pubdir)/$(style)/$(appname)/Images
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Images/%.ico : %.ico $(pubdir)/$(style)/$(appname)/Images
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Images/%.gif : %.gif $(pubdir)/$(style)/$(appname)/Images
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Images/%.jpg : %.jpg $(pubdir)/$(style)/$(appname)/Images
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Layout/%.css : %.css $(pubdir)/$(style)/$(appname)/Layout
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Layout/%.js : %.js $(pubdir)/$(style)/$(appname)/Layout
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/%.sty : %.sty $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/Docs/%.pdf : %.pdf $(pubdir)/$(style)/$(appname)/Docs
	$(installcp) $< $@

$(pubdir)/$(style)/$(appname)/info.xml : info.xml $(pubdir)/$(style)/$(appname)
	$(installcp) $< $@

$(pubdir)/$(appname)/application.xml: application.xml
	$(installcp) $< $@







$(pubdir) :
	mkdir -p $@

$(pubdir)/$(appname) :
	mkdir -p $@

$(pubdir)/$(style)/$(appname) :
	mkdir -p $@

$(pubdir)/$(style)/$(appname)/Images :
	mkdir -p $@

$(pubdir)/$(style)/$(appname)/Docs :
	mkdir -p $@

$(pubdir)/$(style)/$(appname)/Layout :
	mkdir -p $@

publish : $(pages)  mo	
	  @for x in ouille $(SUBDIR);  \
	   do \
		if [ $$x != "ouille" ]; then \
	 	  make -C $$x publish || exit 1; \
		fi \
	   done; \

$(pidir):
	mkdir -p $@

pi : $(PIFILES) $(pidir)
	  @for file in  ouille $(PIFILES); \
           do \
		if [ $$file != "ouille" ]; then \
		   cp $$file $(pidir); \
		fi \
          done; 

TRANSODS =

DISTFILES = $(wildcard *.php) $(wildcard *.gif) $(wildcard *.pdf) \
            $(wildcard *.png) $(wildcard *.ico)  $(wildcard *.css) \
            $(wildcard *.js)  $(wildcard *.xml)  $(wildcard *.odt)\
            $(wildcard *.jpg) $(wildcard *.po)  $(wildcard *.sql) Makefile

TRANSJS = 

distdir = $(PACKAGE)-$(VERSION)-$(RELEASE)

dist: distdir
	cp $(utildir)/PubRule  $(distdir)
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) czf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)

webinst: 
	-rm -fr $(shell pwd)/localpub
	make publish pubdir=$(shell pwd)/localpub
	cd localpub ;	GZIP=$(GZIP_ENV) $(TAR)  czf ../content.tar.gz .
	-rm -rf $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) czf $(distdir).webinst content.tar.gz info.xml $(wildcard LICENSE)
	-rm -f content.tar.gz
	-rm -fr localpub

distdir: $(DISTFILES) $(PIFILES)
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	@for file in $(DISTFILES) $(PIFILES); do \
	  if test -d $$file; then \
	    make -C $$file distdir=../$(distdir)/$$file distdir; \
	  else	\
	    test -f $(distdir)/$$file \
	    || ln $$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$file $(distdir)/$$file || :; \
	  fi; \
	done

sources: $(PACKAGE).spec dist
	@if [ -f ~/.rpmmacros ]; then \
	  rpmdir=`cat ~/.rpmmacros | grep "%_topdir" | awk '{print $$2}'` ; \
	else \
	  echo "%_topdir $$HOME/rpmbuild" > ~/.rpmmacros ; \
	  rpmdir=$$HOME/rpmbuild ; \
	fi ; \
	thetgz=$(distdir).tar.gz;\
	thespec=$(PACKAGE).spec;\
	[ ! -d $$rpmdir/SOURCES ] && mkdir $$rpmdir/SOURCES ; \
	[ ! -d $$rpmdir/SPECS ] && mkdir $$rpmdir/SPECS ; \
	echo $$rpmbuild/SPECS/$$thespec; \
	if [ -f $$rpmdir/SPECS/$$thespec ]; then \
	  rm -f $$rpmdir/SPECS/$$thespec; \
	fi; \
	cd $$rpmdir/SPECS;\
	cvs update $$thespec;\
	cd -; \
	if [ -f $$rpmdir/SOURCES/$$thetgz ]; then \
	  rm -f $$rpmdir/SOURCES/$$thetgz; \
	fi; \
	cd $$rpmdir/SOURCES;\
	cvs update $$thetgz;\
	cd -; \
	echo "Copying $(distdir).tar.gz in $$rpmdir/SOURCES" ; \
	cp -f $$thetgz $$rpmdir/SOURCES ; \
	echo "Copying $(PACKAGE).spec in $$rpmdir/SPECS" ; \
	cp -f $$thespec $$rpmdir/SPECS ; \
	echo "Source done."

rpm : $(PACKAGE).spec dist
	@if [ -f ~/.rpmmacros ]; then \
	  rpmdir=`cat ~/.rpmmacros | grep "%_topdir" | awk '{print $$2}'` ; \
	else \
	  echo "%_topdir $$HOME/rpmbuild" > ~/.rpmmacros ; \
	  rpmdir=$$HOME/rpmbuild ; \
	fi ; \
	[ ! -d $$rpmdir/SOURCES ] && mkdir $$rpmdir/SOURCES ; \
	[ ! -d $$rpmdir/SPECS ] && mkdir $$rpmdir/SPECS ; \
	echo "Copying $(distdir).tar.gz in $$rpmdir/SOURCES" ; \
	cp -f $(distdir).tar.gz $$rpmdir/SOURCES ; \
	echo "Copying $(PACKAGE).spec in $$rpmdir/SPECS" ; \
	cp -f $(PACKAGE).spec $$rpmdir/SPECS ; \
	cd $$rpmdir/SPECS ; \
	rpmbuild -ba $(PACKAGE).spec
	@echo "RPM done."

rpm-fedora : $(PACKAGE)-Fedora.spec dist
	@if [ -f ~/.rpmmacros ]; then \
	  rpmdir=`cat ~/.rpmmacros | grep "%_topdir" | awk '{print $$2}'` ; \
	else \
	  echo "%_topdir $$HOME/rpmbuild" > ~/.rpmmacros ; \
	  rpmdir=$$HOME/rpmbuild ; \
	fi ; \
	[ ! -d $$rpmdir/SOURCES ] && mkdir $$rpmdir/SOURCES ; \
	[ ! -d $$rpmdir/SPECS ] && mkdir $$rpmdir/SPECS ; \
	echo "Copying $(distdir).tar.gz in $$rpmdir/SOURCES" ; \
	cp -f $(distdir).tar.gz $$rpmdir/SOURCES ; \
	echo "Copying $(PACKAGE)-Fedora.spec in $$rpmdir/SPECS" ; \
	cp -f $(PACKAGE)-Fedora.spec $$rpmdir/SPECS ; \
	cd $$rpmdir/SPECS ; \
	rpmbuild -ba $(PACKAGE)-Fedora.spec
	@echo "RPM done."
#-------------------------- gettext translation -------------

po:	
	find . \( -name "*.xml" -o -name "*.js" \) -exec \
	perl -ne 'print "N_(\"$$1\")\n" while(m/\[TEXT:([^]]+)]/g)' {} \; \
	> textxml.php

	find . -type f -name "*.php" -print0 | xargs -0 php -r 'array_walk(array_slice($$argv,1),function($$f){array_walk(preg_filter("/.*@(searchLabel)\\s+([^\\n]+)\\n.*/s","\\2",array_map(function($$t){return$$t[1];},array_filter(token_get_all(file_get_contents($$f)),function($$t){return($$t[0]==T_DOC_COMMENT);}))),function($$t){printf("N_(\"%s\")\n",preg_replace("/\"/","\\\"",$$t));});});' >> textxml.php

	find . \( -name "*.app" -o -name "*.php" \) -print \
	| xgettext  -f- --no-location --keyword='_' --keyword='N_' --keyword='text' --keyword='Text' --language=c --from-code=iso8859-1 -o$(appname).pot

	find . \( -name "*.js" -o -name "*.html" \) -print \
	| xgettext  -f- --no-location --keyword='_'  --language=c -o $(appname)_js.pot
	rm -f $(appname)_ODS.pot;
	if [ ! -e $(appname)_ODS.pot ]; then \
			LC_ALL=fr_FR.UTF-8 msginit --no-translator -i $(appname).pot -o $(appname)_ODS.pot; \
		fi; \
	php -q $(utildir)/fam2po.php $(TRANSODS)  >> $(appname)_ODS.pot;

	echo "LANGS = '$(LANGS)'";

	for lang in  $(LANGS); do \
		if [ ! -e $(appname)_$$lang.po ]; then \
			LC_ALL=fr_FR.UTF-8 msginit --no-translator -i $(appname).pot -o $(appname)_$$lang.po; \
		fi; \
		msguniq $(appname)_ODS.pot > $(appname)_ODS_g.pot; \
		msgcat $(appname).pot $(appname)_ODS_g.pot > $(appname)_tmp_$$lang.pot; \
		msgmerge -s -v --force-po -N $(appname)_$$lang.po $(appname)_tmp_$$lang.pot  > $(appname)_$$lang.po.new; \
		mv $(appname)_$$lang.po.new $(appname)_$$lang.po; \
		rm -f $(appname)_tmp_$$lang.pot; \
		if [ -f $(appname)_js.pot ]; then \
			if [ -f js_$(appname)_$$lang.po ]; then \
				msgmerge -s -v --force-po js_$(appname)_$$lang.po $(appname)_js.pot  > $(appname)_js_$$lang.pot; \
				mv $(appname)_js_$$lang.pot js_$(appname)_$$lang.po; \
			else \
				cp $(appname)_js.pot js_$(appname)_$$lang.po; \
			fi; \
		fi; \
        done \

	@rm -f textxml.php
	@rm -f $(appname)*.pot

localedir=$(pubdir)/locale

pages_gmo = $(patsubst $(appname)_%.po,%.gmo,$(wildcard *.po))
pages_mo = $(patsubst $(appname)_%.po,$(localedir)/%/LC_MESSAGES/$(appname).mo,$(wildcard *.po))
pages_jsmo = $(patsubst js_$(appname)_%.po,$(localedir)/%/js/$(appname)-mo.js,$(wildcard *.po))
pages_lang = $(patsubst lang_%.php,$(localedir)/%/lang.php,$(wildcard lang_*.php))

$(localedir)/%/LC_MESSAGES:
	 mkdir -p $@

$(localedir)/%/js:
	 mkdir -p $@

$(localedir)/%/LC_MESSAGES/$(appname).mo : /var/tmp/$(appname)_%.gmo  $(localedir)/%/LC_MESSAGES $(wildcard *.po)
	 $(installcp) $< $@

$(localedir)/%/js/$(appname)-mo.js :  js_$(appname)_%.po $(localedir)/%/js
	msgfmt $< -o- | msgunfmt > /var/tmp/$<.tmp
	php -q $(utildir)/po2js.php /var/tmp/$<.tmp > $@ || /bin/true
	\rm -f /var/tmp/$<.tmp

$(localedir)/%/lang.php: lang_%.php $(localedir)/%/LC_MESSAGES
	$(installcp) $< $@

/var/tmp/$(appname)_%.gmo: $(appname)_%.po
	msgfmt -v $< -o $@;

mo: $(pages_mo) $(pages_jsmo) $(pages_lang)




#-------------------------- end gettext translation -------------

##----------------------------------------------------
## -- add post install file and migration file

DISTFILES += $(wildcard $(appname)_post) $(wildcard $(appname)_*migr_*) 
#add configuration file (.in) 
DISTFILES += $(wildcard *.in) $(wildcard $(appname).app) $(wildcard $(appname)_*.po)

pages_migr = $(patsubst $(appname)_migr_%,$(pubdir)/$(appname)/$(appname)_migr_%,$(wildcard $(appname)_migr_*))
pages_migr += $(patsubst $(appname)_pmigr_%,$(pubdir)/$(appname)/$(appname)_pmigr_%,$(wildcard $(appname)_pmigr_*))
pages_migr += $(patsubst $(appname)_postmigr_%,$(pubdir)/$(appname)/$(appname)_postmigr_%,$(wildcard $(appname)_postmigr_*))
pages_migr += $(patsubst $(appname)_premigr_%,$(pubdir)/$(appname)/$(appname)_premigr_%,$(wildcard $(appname)_premigr_*))
page_post = $(patsubst $(appname)_post%,$(pubdir)/$(appname)/$(appname)_post%,$(wildcard $(appname)_post))

$(pubdir)/$(appname)/$(appname)_post : $(appname)_post $(pubdir)/$(appname)
	install -p -m 0755 $(appname)_post $(pubdir)/$(appname)

$(pubdir)/$(appname)/$(appname)_migr_% : $(appname)_migr_%
	install -p -m 0755 $< $@
$(pubdir)/$(appname)/$(appname)_pmigr_% : $(appname)_pmigr_%
	install -p -m 0755 $< $@
$(pubdir)/$(appname)/$(appname)_premigr_% : $(appname)_premigr_%
	install -p -m 0755 $< $@
$(pubdir)/$(appname)/$(appname)_postmigr_% : $(appname)_postmigr_%
	install -p -m 0755 $< $@

publish: $(page_post) $(pages_migr)
